第2章 一切都是对象

程序运行时，对象在内存是怎么存储的呢？
1、寄存器
    数量极其有限，根据需求进行分配，不能人工直接控制
2、堆栈
    通用RAM（随机访问存储器），通过堆栈指针可以从处理器那里获取直接支持。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。
3、堆
    通用内存池（也位于RAM区），用于存放所有的Java对象。
    堆不同于堆栈的好处是：编译器不需要知道存储的数据在堆里存活多长时间。
    堆分配时灵活性较高，执行new一个对象时，会自动在堆中进行分配。
    用堆进行存储分配和清理可能会比用堆栈进行存储分配需要更多的时间。
4、常量存储
    存放在代码内部，永远不会被改变。
5、非RAM存储
    流对象：对象转化成字节流，通常被发送给另一个机器。
    持久化对象：对象被存放于磁盘上，因此即使程序终止，仍可以保持自己的状态。

基本类型
boolean，true或者false
char
byte
short
int
long
float
double
void

高精度数字，用于高精度计算的类
BigInteger：支持任意精度的数字
BigDecimal：支持任何精度的定点数，如货币计算

Java中的数组
当创建一个数组对象时，实际上就是创建了一个数组引用，并且每个引用都会被自动初始化为一个特定值，该值用于自己的关键字null。

作用域
    决定了在其内定义的变量名的可见性和生命周期，作用域定义的变量只可于作用域结束之前。
    Java对象不具备和基本类型一样的生命周期，当用new一个Java对象时，可以存活在作用域之外。
    {
        String s = new String("a string");
    }
    引用s在作用域终点就消失了，但s指向的String对象仍然继续占据内存空间。

Java有一个垃圾回收器，用来监听用new创建的所有对象，并辨别那些不会再被引用的对象。随后，释放这些对象的内存空间，以便提供其他新的对象使用。

方法名和参数列表(合起来被称为"方法签名")唯一标识出某个方法。


int x = a.f();
这种调用方式被称为：发送消息给对象，消息是f()，对象是a。面向对象的程序设计，通常被归纳为"向对象发送消息"。

import，指示编译器倒入一个包，也就是一个类库。

static关键字
    通常来说，当执行new来创建对象时，数据存储空间才被分配，其方法才供外界调用。
    两个问题无法解决：
        1、只想为某特定域分配单一存储空间，而不去考虑需要创建多少对象
        2、当不创建对象，也能调用这个方法。

    当声明一个事物是static时，意味着这个域或方法不会包含与它的那个类的任何对象实例关联在一起。

    class StaticTest {
        static int i = 47;
    }

    StaticTest st1 = new StaticTest();
    StaticTest st2 = new StaticTest();
    st1.i和st2.i指向同一存储空间。

    static方法的一个重要用法：不创建任何对象的前提下，就可以调用它。

类的名字必须和文件名相同。

Java注释风格：单行注释、多行注释
编码风格：驼峰，类名首字母大写。