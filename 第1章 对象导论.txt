第1章 对象导论

OOP允许根据问题来描述问题，而不是根据运行解决方案的计算机来描述问题。

Java面向对象的五个特性：
1、万物皆对象
    可以抽取待求解问题的任何概念化构件（狗、建筑物），将其表示为程序中的对象。
2、程序是对象的集合，通过发送消息告诉彼此所需要做的
    //todo
3、每个对象都有自己的由其他对象所构成的存储
4、每个对象都拥有其类型
5、某一特定类型的所有对象都可以接受同样的消息
    可替代性

把对象看作是服务提供者，有助于提高对象的内聚性。

将程序开发人员按照角色分为：
类创建者（创建新数据类型的程序员），目标是构建类，只向客户端程序员暴露必须的部分，隐藏其他部分。
客户端程序员（使用数据类型的类消费者），目标是收集各种用来快速开发的类。

访问控制的原因：
1、让客户端程序员无法触及他们不应该触及的部分，只关心自己需要的操作；
2、允许类创建者可以改变内部工作方式，而不担心影响到客户端程序员，接口和实现分离。

访问控制的三个关键字
public 对任何人都是可用的
private 除类的创建者和类型的内部方法之外的任何人都不能访问
protected 与private作用相当，差别仅在于继承的类可以访问protected成员，不能访问private成员。

继承
    extends：继承
    overriding：覆盖，子类重写父类方法。
    
    is-a（是一个）关系：替代原则（纯粹替代），用子类来完全代替父类，如一个圆形就是一个几何形状。
    is-like-a（像一个）关系：空调坏了，换一个风扇。

    //todo
前期绑定
后期绑定

单根继承结构：所有的类，都继承自单一的基类，Object。

参数化类型，编译器可以自动定制作用于特定类型上的类。
Java中称为范型，一对尖括号，中间包含类信息，如ArrayList<Shape> shapes = new ArrayList<Shape>();

对象的生命周期
怎样控制对象的生命周期？
1、将对象置于堆栈或静态存储区，将对象的存储空间和生命周期在编写程序时就确定。
    优：执行速度快
    缺：牺牲灵活性
2、在堆（heap）的内存池中动态地创建对象，直到运行时才知道需要多少对象，生命周期和类型是什么。
    优：灵活性好
    缺：执行效率差
在堆栈上创建对象的语言，编译器可以确定对象存活的时间，并可以自动销毁；在堆上创建对象，编译器对它的生命周期一无所知。

Java垃圾回收两个特性
1、垃圾回收器知道，对象何时不再被使用，并且自动释放被对象占用的内存
2、所有对象都继承自单根基类Object
3、所有对象只能在堆上创建

异常不能被忽略，所以它保证一定会在某处得到处理。

通用网关接口（common gateway interface,CGI）

